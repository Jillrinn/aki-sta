name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ============================================
  # Backend Tests
  # ============================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./functions
    
    - name: Run tests
      run: npm test
      working-directory: ./functions
    
    - name: Run tests with coverage
      if: matrix.node-version == '20.x'
      run: npm run test:coverage
      working-directory: ./functions
    
    - name: Check coverage threshold
      if: matrix.node-version == '20.x'
      run: |
        cd functions
        COVERAGE=$(npx jest --coverage --silent 2>&1 | grep "All files" | awk '{print $10}' | sed 's/%//')
        echo "Backend test coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Coverage is below 80% threshold"
          exit 1
        fi
        echo "‚úÖ Coverage meets the 80% threshold"
    
    - name: Upload backend coverage
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: functions/coverage/
        retention-days: 7

  # ============================================
  # Frontend Tests
  # ============================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run tests
      run: npm test -- --watchAll=false --passWithNoTests
      working-directory: ./frontend
      env:
        CI: true
    
    - name: Run tests with coverage
      if: matrix.node-version == '20.x'
      run: npm test -- --coverage --watchAll=false
      working-directory: ./frontend
      env:
        CI: true
    
    - name: Upload frontend coverage
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 7

  # ============================================
  # Build
  # ============================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
      env:
        CI: true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7
    
    - name: Verify build
      run: |
        if [ -d "frontend/build/static" ]; then
          echo "‚úÖ Frontend build successful"
          ls -la frontend/build/
        else
          echo "‚ùå Frontend build failed"
          exit 1
        fi

  # ============================================
  # Python Scraper Tests
  # ============================================
  scraper-test:
    name: Python Scraper Tests
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('scraper/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      working-directory: ./scraper
    
    - name: Install Playwright browsers with environment isolation
      run: |
        # Áí∞Â¢ÉÂàÜÈõ¢Ë®≠ÂÆö„ÇíÈÅ©Áî®„Åó„Å¶„Éñ„É©„Ç¶„Ç∂„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
        source .env.playwright
        playwright install --with-deps webkit
      working-directory: ./scraper
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v
      working-directory: ./scraper
    
    - name: Upload scraper test results
      if: matrix.python-version == '3.9'
      uses: actions/upload-artifact@v4
      with:
        name: scraper-test-results
        path: scraper/.pytest_cache/
        retention-days: 7

  # ============================================
  # E2E Tests
  # ============================================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-22.04
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: e2e/package-lock.json
    
    
    - name: Install dependencies
      run: |
        cd functions && npm ci
        cd ../frontend && npm ci
        cd ../e2e && npm ci
    
    - name: Install Playwright browsers with environment isolation
      run: |
        cd e2e
        # Êñ∞„Åó„ÅÑÁí∞Â¢ÉÂàÜÈõ¢„Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®
        npm run setup-env
        # Âãï‰ΩúÁ¢∫Ë™ç
        npm run ensure-browsers
    
    - name: Start Azure Functions
      run: |
        cd functions
        # Start Azure Functions in background with nohup using npx
        nohup npx func start --port 7071 > azure-functions.log 2>&1 &
        echo $! > azure-functions.pid
        echo "Azure Functions PID: $(cat azure-functions.pid)"
        
        # Wait for Azure Functions to be ready
        echo "Waiting for Azure Functions to start..."
        for i in {1..30}; do
          if curl -s -f http://localhost:7071/api/availability/2025-11-15 > /dev/null 2>&1; then
            echo "‚úÖ Azure Functions is running and responding"
            break
          fi
          echo "Attempt $i/30: Azure Functions not ready yet..."
          sleep 2
        done
        
        # Check if it's really running
        if ! curl -s -f http://localhost:7071/api/availability/2025-11-15 > /dev/null 2>&1; then
          echo "‚ùå Azure Functions failed to start"
          echo "=== Azure Functions Log ==="
          cat azure-functions.log
          exit 1
        fi
      env:
        FUNCTIONS_WORKER_RUNTIME: node
        AzureWebJobsStorage: ""
    
    - name: Start Frontend
      run: |
        cd frontend
        # Start Frontend in background with nohup
        nohup npm start > frontend.log 2>&1 &
        echo $! > frontend.pid
        echo "Frontend PID: $(cat frontend.pid)"
        
        # Wait for Frontend to be ready
        echo "Waiting for Frontend to start..."
        for i in {1..30}; do
          if curl -s -f http://localhost:3300 2>&1 | grep -q "<!DOCTYPE html>"; then
            echo "‚úÖ Frontend is running and serving HTML"
            break
          fi
          echo "Attempt $i/30: Frontend not ready yet..."
          sleep 2
        done
        
        # Check if it's really running
        if ! curl -s -f http://localhost:3300 2>&1 | grep -q "<!DOCTYPE html>"; then
          echo "‚ùå Frontend failed to start"
          echo "=== Frontend Log ==="
          cat frontend.log
          exit 1
        fi
      env:
        CI: true
        BROWSER: none
        PORT: 3300
    
    - name: Run E2E tests
      run: |
        cd e2e
        npm test
      env:
        CI: true
    
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Azure Functions Log ==="
        if [ -f functions/azure-functions.log ]; then
          tail -100 functions/azure-functions.log
        fi
        echo "=== Frontend Log ==="
        if [ -f frontend/frontend.log ]; then
          tail -100 frontend/frontend.log
        fi
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: e2e/test-results/
        retention-days: 7
    
    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 7

  # ============================================
  # Deploy (Placeholder for future)
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Placeholder for deployment
      run: |
        echo "üöÄ Deployment step placeholder"
        echo "This step will deploy to Azure when configured"
        echo ""
        echo "Required setup:"
        echo "1. Azure credentials in GitHub Secrets"
        echo "2. Resource group and app service created"
        echo "3. Deployment scripts configured"
        echo ""
        echo "Current status: Ready for deployment configuration"

  # ============================================
  # Summary
  # ============================================
  ci-summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-test, frontend-test, scraper-test, build, e2e-test, deploy-staging]
    
    steps:
    - name: Generate Summary
      run: |
        echo "# üìä CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-test.result == 'success' && '‚úÖ Passed' || needs.backend-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-test.result == 'success' && '‚úÖ Passed' || needs.frontend-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Scraper Tests | ${{ needs.scraper-test.result == 'success' && '‚úÖ Passed' || needs.scraper-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || needs.build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-test.result == 'success' && '‚úÖ Passed' || needs.integration-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-test.result == 'success' && '‚úÖ Passed' || needs.e2e-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy (Staging) | ${{ needs.deploy-staging.result == 'success' && '‚úÖ Deployed' || needs.deploy-staging.result == 'skipped' && '‚è≠Ô∏è Not deployed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "${{ needs.backend-test.result }}" == "success" ] && \
           [ "${{ needs.frontend-test.result }}" == "success" ] && \
           [ "${{ needs.scraper-test.result }}" == "success" ] && \
           [ "${{ needs.build.result }}" == "success" ] && \
           [ "${{ needs.integration-test.result }}" == "success" ] && \
           [ "${{ needs.e2e-test.result }}" == "success" ]; then
          echo "## ‚úÖ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ö†Ô∏è Some tests failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated at $(date)*" >> $GITHUB_STEP_SUMMARY