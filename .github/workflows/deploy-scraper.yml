name: Deploy Scraper to Azure Web Apps

on:
  push:
    branches: [main]
    paths:
      - 'scraper/**'
      - '.github/workflows/deploy-scraper.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual deployment reason'
        required: false
        default: 'Manual deployment'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jillrinn/aki-sta-scraper  # 小文字に固定（Dockerレジストリ要件）
  AZURE_WEBAPP_NAME: aki-sta-scraper     # Azure Portalの実際のWeb App名

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest
          type=raw,value=${{ github.sha }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./scraper
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
  
  test:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull Docker image
      run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Create .env.docker for testing
      run: |
        cat > scraper/.env.docker <<EOF
        COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}
        COSMOS_KEY=${{ secrets.COSMOS_KEY }}
        COSMOS_DATABASE=${{ secrets.COSMOS_DATABASE }}
        DEBUG=true
        PYTHONUNBUFFERED=1
        PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
        EOF
    
    - name: Start Docker container
      run: |
        docker run -d \
          --name scraper-test \
          -p 8000:8000 \
          --env-file scraper/.env.docker \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Wait for container to be ready
      run: |
        echo "Waiting for container to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8000/health > /dev/null; then
            echo "Container is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
        
        # Final health check
        curl -f http://localhost:8000/health || exit 1
    
    - name: Test health endpoint
      run: |
        echo "Testing health endpoint..."
        response=$(curl -s http://localhost:8000/health)
        echo "Response: $response"
        
        # Check if response contains expected fields
        if echo "$response" | grep -q '"status".*"healthy"'; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed - expected 'healthy' status"
          echo "Response was: $response"
          exit 1
        fi
    
    - name: Get dynamic test date
      id: get-date
      run: |
        cd scraper
        TEST_DATE=$(python scripts/get_test_date.py)
        echo "test_date=$TEST_DATE" >> $GITHUB_OUTPUT
        echo "Using test date: $TEST_DATE"
    
    - name: Test scrape endpoint with valid date
      run: |
        echo "Testing scrape endpoint with dynamic date: ${{ steps.get-date.outputs.test_date }}..."
        response=$(curl -s -X POST "http://localhost:8000/scrape?date=${{ steps.get-date.outputs.test_date }}")
        echo "Response: $response"
        
        # Check for success or expected structure (updated format)
        if echo "$response" | grep -q '"status":"success"'; then
          echo "✅ Scrape endpoint returned success"
        elif echo "$response" | grep -q '"success":true'; then
          echo "✅ Scrape endpoint returned success (legacy format)"
        elif echo "$response" | grep -q '"facilities":\[\]'; then
          echo "✅ Scrape endpoint returned empty facilities (expected for future date)"
        else
          echo "❌ Unexpected response from scrape endpoint"
          exit 1
        fi
    
    - name: Test scrape endpoint with invalid date
      run: |
        echo "Testing error handling with invalid date..."
        response=$(curl -s -X POST "http://localhost:8000/scrape?date=invalid-date")
        echo "Response: $response"
        
        # Check for error response (updated for new format)
        if echo "$response" | grep -q '"success":false'; then
          echo "✅ Error handling test passed (new format)"
        elif echo "$response" | grep -q '"error"'; then
          echo "✅ Error handling test passed (legacy format)"
        else
          echo "❌ Expected error response for invalid date"
          exit 1
        fi
    
    - name: Show container logs (if failed)
      if: failure()
      run: docker logs scraper-test
    
    - name: Stop and remove test container
      if: always()
      run: |
        docker stop scraper-test || true
        docker rm scraper-test || true
  
  deploy:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'