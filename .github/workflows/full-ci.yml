name: Full CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json
    
    - name: Install backend dependencies
      run: npm ci
      working-directory: ./functions
    
    - name: Run backend tests with coverage
      run: npm run test:coverage
      working-directory: ./functions
    
    - name: Check backend coverage
      run: |
        cd functions
        COVERAGE=$(npx jest --coverage --silent 2>&1 | grep "All files" | awk '{print $10}' | sed 's/%//')
        echo "Backend coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Backend coverage is below 80% threshold"
          exit 1
        fi
        echo "✅ Backend coverage meets threshold"

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run frontend tests with coverage
      run: npm test -- --coverage --watchAll=false
      working-directory: ./frontend
      env:
        CI: true
    
    - name: Check frontend coverage
      run: |
        echo "✅ Frontend tests completed"
      working-directory: ./frontend

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install Azure Functions Core Tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
        sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
        sudo apt-get update
        sudo apt-get install -y azure-functions-core-tools-4
    
    - name: Install dependencies
      run: |
        cd functions && npm ci
        cd ../frontend && npm ci
    
    - name: Create functions entry point
      run: |
        cd functions
        echo "module.exports = require('./availability-api/index');" > index.js
    
    - name: Start Azure Functions
      run: |
        cd functions
        func start --port 7071 &
        sleep 10
        curl -f http://localhost:7071/api/availability/2025-11-15 || exit 1
        echo "✅ Azure Functions API is responding"
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        echo "✅ Frontend build completed"
    
    - name: Test API endpoint
      run: |
        response=$(curl -s http://localhost:7071/api/availability/2025-11-15)
        echo "API Response: $response"
        if [[ $response == *"facilities"* ]]; then
          echo "✅ API returns expected data structure"
        else
          echo "❌ API response is invalid"
          exit 1
        fi

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test]
    
    steps:
    - name: Summary
      run: |
        echo "🎉 All tests passed successfully!"
        echo "✅ Backend tests"
        echo "✅ Frontend tests"
        echo "✅ Integration tests"