import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import HowToUse from './HowToUse';

describe('HowToUse', () => {
  it('should render the component with title', () => {
    render(<HowToUse />);
    expect(screen.getByText('‰Ωø„ÅÑÊñπ„ÅØ„Åã„Çì„Åü„ÇìÔºì„Çπ„ÉÜ„ÉÉ„Éó')).toBeInTheDocument();
  });

  it('should display welcome message', () => {
    render(<HowToUse />);
    expect(screen.getByText('„Çà„ÅÜ„Åì„ÅùÔºÅ')).toBeInTheDocument();
    expect(screen.getByText(/Èù¢ÂÄí„Å™„Çπ„Çø„Ç∏„Ç™Êé¢„Åó„ÅØ/)).toBeInTheDocument();
    expect(screen.getByText(/„ÅÇ„Çì„Åï„Çì„Å∂„Çã„Çπ„Çø„Ç∏„Ç™/)).toBeInTheDocument();
  });

  it('should display all steps when initially opened', () => {
    render(<HowToUse />);
    
    expect(screen.getByText('„ÄêÁôªÈå≤„Äë')).toBeInTheDocument();
    expect(screen.getByText('Á∑¥Áøí„Åó„Åü„ÅÑÊó•„ÇíÊïô„Åà„Çà„ÅÜ')).toBeInTheDocument();
    expect(screen.getByText(/„ÄåÁ∑¥ÁøíÊó•Á®ã‰∏ÄË¶ß„Äç„Éö„Éº„Ç∏„ÅßÁ∑¥ÁøíÊó•„ÇíÁôªÈå≤/)).toBeInTheDocument();
    
    expect(screen.getByText('„ÄêËá™Âãï„ÉÅ„Çß„ÉÉ„ÇØ„Äë')).toBeInTheDocument();
    expect(screen.getByText('„ÅÇ„Å®„ÅØÂæÖ„Å§„Å†„ÅëÔºÅ')).toBeInTheDocument();
    expect(screen.getByText(/ÊØéÊó•2ÂõûÔºàÊúù8ÊôÇ„ÉªÂ§ïÊñπ17ÊôÇÔºâ/)).toBeInTheDocument();
    
    expect(screen.getByText('„ÄêÂç≥ÊôÇ„ÉÅ„Çß„ÉÉ„ÇØ„Äë')).toBeInTheDocument();
    expect(screen.getByText('‰ªä„Åô„ÅêÁü•„Çä„Åü„ÅÑÔºÅ')).toBeInTheDocument();
    expect(screen.getByText(/‰∏ã„ÅÆ„Äå‰ªä„Åô„ÅêÊÉÖÂ†±„ÇíÈõÜ„ÇÅ„Çã„Äç„Éú„Çø„É≥/)).toBeInTheDocument();
  });

  it('should toggle content visibility when header is clicked', async () => {
    render(<HowToUse />);
    
    const toggleButton = screen.getByRole('button', { name: /‰Ωø„ÅÑÊñπ„ÅØ„Åã„Çì„Åü„Çì/ });
    const content = document.getElementById('how-to-use-content');
    
    expect(content).toHaveClass('opacity-100');
    expect(toggleButton).toHaveAttribute('aria-expanded', 'true');
    
    fireEvent.click(toggleButton);
    
    await waitFor(() => {
      expect(content).toHaveClass('opacity-0');
      expect(toggleButton).toHaveAttribute('aria-expanded', 'false');
    });
    
    fireEvent.click(toggleButton);
    
    await waitFor(() => {
      expect(content).toHaveClass('opacity-100');
      expect(toggleButton).toHaveAttribute('aria-expanded', 'true');
    });
  });


  it('should display all step icons', () => {
    render(<HowToUse />);
    
    expect(screen.getByText('üìù')).toBeInTheDocument();
    expect(screen.getByText('‚è∞')).toBeInTheDocument();
    expect(screen.getByText('üîÑ')).toBeInTheDocument();
  });

  it('should display step numbers', () => {
    render(<HowToUse />);
    
    expect(screen.getByText('1')).toBeInTheDocument();
    expect(screen.getByText('2')).toBeInTheDocument();
    expect(screen.getByText('3')).toBeInTheDocument();
  });

  it('should have proper accessibility attributes', () => {
    render(<HowToUse />);
    
    const toggleButton = screen.getByRole('button', { name: /‰Ωø„ÅÑÊñπ„ÅØ„Åã„Çì„Åü„Çì/ });
    expect(toggleButton).toHaveAttribute('aria-expanded');
    expect(toggleButton).toHaveAttribute('aria-controls', 'how-to-use-content');
  });
});